controlPlane:
  advanced:
    defaultImageRegistry: ""
    globalMetadata:
      annotations: {}
    headlessService:
      annotations: {}
      labels: {}
    serviceAccount:
      annotations: {}
      enabled: true
      imagePullSecrets: []
      labels: {}
      name: ""
    virtualScheduler:
      enabled: false
    workloadServiceAccount:
      annotations: {}
      enabled: true
      imagePullSecrets: []
      labels: {}
      name: ""
  backingStore:
    database:
      embedded:
        enabled: false
      external:
        caFile: ""
        certFile: ""
        dataSource: ""
        enabled: false
        keyFile: ""
    etcd:
      deploy:
        enabled: false
        headlessService:
          annotations: {}
          enabled: true
        service:
          annotations: {}
          enabled: true
        statefulSet:
          annotations: {}
          enableServiceLinks: true
          enabled: true
          env: []
          extraArgs: []
          highAvailability:
            replicas: 1
          image:
            registry: registry.k8s.io
            repository: etcd
            tag: 3.5.13-0
          imagePullPolicy: ""
          labels: {}
          persistence:
            addVolumeMounts: []
            addVolumes: []
            volumeClaim:
              accessModes:
              - ReadWriteOnce
              enabled: true
              retentionPolicy: Retain
              size: 5Gi
              storageClass: ""
            volumeClaimTemplates: []
          pods:
            annotations: {}
            labels: {}
          resources:
            requests:
              cpu: 20m
              memory: 150Mi
          scheduling:
            affinity: {}
            nodeSelector: {}
            podManagementPolicy: Parallel
            priorityClassName: ""
            tolerations: []
            topologySpreadConstraints: []
          security:
            containerSecurityContext: {}
            podSecurityContext: {}
      embedded:
        enabled: false
        migrateFromDeployedEtcd: false
  coredns:
    deployment:
      annotations: {}
      image: ""
      labels: {}
      nodeSelector: {}
      pods:
        annotations: {}
        labels: {}
      replicas: 1
      resources:
        limits:
          cpu: 1000m
          memory: 170Mi
        requests:
          cpu: 20m
          memory: 64Mi
      topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            k8s-app: kube-dns
        maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
    embedded: false
    enabled: true
    overwriteConfig: ""
    overwriteManifests: ""
    priorityClassName: ""
    service:
      annotations: {}
      labels: {}
      spec:
        type: ClusterIP
  distro:
    eks:
      apiServer:
        command: []
        enabled: true
        extraArgs: []
        image:
          registry: public.ecr.aws
          repository: eks-distro/kubernetes/kube-apiserver
          tag: v1.28.2-eks-1-28-6
        imagePullPolicy: ""
      controllerManager:
        command: []
        enabled: true
        extraArgs: []
        image:
          registry: public.ecr.aws
          repository: eks-distro/kubernetes/kube-controller-manager
          tag: v1.28.2-eks-1-28-6
        imagePullPolicy: ""
      enabled: false
      env: []
      resources:
        limits:
          cpu: 100m
          memory: 256Mi
        requests:
          cpu: 40m
          memory: 64Mi
      scheduler:
        command: []
        extraArgs: []
        image:
          registry: public.ecr.aws
          repository: eks-distro/kubernetes/kube-scheduler
          tag: v1.28.2-eks-1-28-6
        imagePullPolicy: ""
      securityContext: {}
    k0s:
      command: []
      config: ""
      enabled: false
      extraArgs: []
      image:
        registry: ""
        repository: k0sproject/k0s
        tag: v1.30.2-k0s.0
      imagePullPolicy: ""
      resources:
        limits:
          cpu: 100m
          memory: 256Mi
        requests:
          cpu: 40m
          memory: 64Mi
      securityContext: {}
    k3s:
      command: []
      enabled: false
      extraArgs: []
      image:
        registry: ""
        repository: rancher/k3s
        tag: v1.30.2-k3s1
      imagePullPolicy: ""
      resources:
        limits:
          cpu: 100m
          memory: 256Mi
        requests:
          cpu: 40m
          memory: 64Mi
      securityContext: {}
    k8s:
      apiServer:
        command: []
        enabled: true
        extraArgs: []
        image:
          registry: registry.k8s.io
          repository: kube-apiserver
          tag: v1.30.2
        imagePullPolicy: ""
      controllerManager:
        command: []
        enabled: true
        extraArgs: []
        image:
          registry: registry.k8s.io
          repository: kube-controller-manager
          tag: v1.30.2
        imagePullPolicy: ""
      enabled: false
      env: []
      resources:
        limits:
          cpu: 100m
          memory: 256Mi
        requests:
          cpu: 40m
          memory: 64Mi
      scheduler:
        command: []
        extraArgs: []
        image:
          registry: registry.k8s.io
          repository: kube-scheduler
          tag: v1.29.0
        imagePullPolicy: ""
      securityContext: {}
  ingress:
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: HTTPS
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
    enabled: false
    host: my-host.com
    labels: {}
    pathType: ImplementationSpecific
    spec:
      tls: []
  proxy:
    bindAddress: 0.0.0.0
    extraSANs: []
    port: 8443
  service:
    annotations: {}
    enabled: true
    httpsNodePort: 0
    kubeletNodePort: 0
    labels: {}
    spec:
      type: ClusterIP
  serviceMonitor:
    annotations: {}
    enabled: false
    labels: {}
  statefulSet:
    annotations: {}
    args: []
    command: []
    enableServiceLinks: true
    env: []
    highAvailability:
      leaseDuration: 60
      renewDeadline: 40
      replicas: 1
      retryPeriod: 15
    image:
      registry: ghcr.io
      repository: loft-sh/vcluster-pro
      tag: ""
    imagePullPolicy: ""
    labels: {}
    persistence:
      addVolumeMounts: []
      addVolumes: []
      binariesVolume:
      - emptyDir: {}
        name: binaries
      volumeClaim:
        accessModes:
        - ReadWriteOnce
        enabled: auto
        retentionPolicy: Retain
        size: 5Gi
        storageClass: ""
      volumeClaimTemplates: []
    pods:
      annotations: {}
      labels: {}
    probes:
      livenessProbe:
        enabled: true
      readinessProbe:
        enabled: true
      startupProbe:
        enabled: true
    resources:
      limits:
        ephemeral-storage: 8Gi
        memory: 2Gi
      requests:
        cpu: 200m
        ephemeral-storage: 400Mi
        memory: 256Mi
    scheduling:
      affinity: {}
      nodeSelector: {}
      podManagementPolicy: Parallel
      priorityClassName: ""
      tolerations: []
      topologySpreadConstraints: []
    security:
      containerSecurityContext:
        allowPrivilegeEscalation: false
        runAsGroup: 0
        runAsUser: 0
      podSecurityContext: {}
    workingDir: ""
experimental:
  deploy:
    host:
      manifests: ""
      manifestsTemplate: ""
    vcluster:
      helm: []
      manifests: ""
      manifestsTemplate: ""
  genericSync:
    clusterRole:
      extraRules: []
    role:
      extraRules: []
  isolatedControlPlane:
    headless: false
  multiNamespaceMode:
    enabled: false
  syncSettings:
    disableSync: false
    rewriteKubernetesService: false
    setOwner: true
    syncLabels: []
    targetNamespace: ""
exportKubeConfig:
  context: ""
  secret:
    name: ""
    namespace: ""
  server: ""
external: {}
integrations:
  metricsServer:
    enabled: false
    nodes: true
    pods: true
networking:
  advanced:
    clusterDomain: cluster.local
    fallbackHostCluster: false
    proxyKubelets:
      byHostname: true
      byIP: true
  replicateServices:
    fromHost: []
    toHost: []
  resolveDNS: []
plugins: {}
policies:
  centralAdmission:
    mutatingWebhooks: []
    validatingWebhooks: []
  limitRange:
    annotations: {}
    default:
      cpu: "1"
      ephemeral-storage: 8Gi
      memory: 512Mi
    defaultRequest:
      cpu: 100m
      ephemeral-storage: 3Gi
      memory: 128Mi
    enabled: false
    labels: {}
  networkPolicy:
    annotations: {}
    enabled: false
    fallbackDns: 8.8.8.8
    labels: {}
    outgoingConnections:
      ipBlock:
        cidr: 0.0.0.0/0
        except:
        - 100.64.0.0/10
        - 127.0.0.0/8
        - 10.0.0.0/8
        - 172.16.0.0/12
        - 192.168.0.0/16
  resourceQuota:
    annotations: {}
    enabled: false
    labels: {}
    quota:
      count/configmaps: 100
      count/endpoints: 40
      count/persistentvolumeclaims: 20
      count/pods: 20
      count/secrets: 100
      count/services: 20
      limits.cpu: 20
      limits.ephemeral-storage: 160Gi
      limits.memory: 40Gi
      requests.cpu: 10
      requests.ephemeral-storage: 60Gi
      requests.memory: 20Gi
      requests.storage: 100Gi
      services.loadbalancers: 1
      services.nodeports: 0
    scopeSelector:
      matchExpressions: []
    scopes: []
rbac:
  clusterRole:
    enabled: auto
    extraRules: []
    overwriteRules: []
  role:
    enabled: true
    extraRules: []
    overwriteRules: []
sync:
  fromHost:
    csiDrivers:
      enabled: auto
    csiNodes:
      enabled: auto
    csiStorageCapacities:
      enabled: auto
    events:
      enabled: true
    ingressClasses:
      enabled: false
    nodes:
      clearImageStatus: false
      enabled: false
      selector:
        all: false
        labels: {}
      syncBackChanges: false
    storageClasses:
      enabled: auto
  toHost:
    configMaps:
      all: false
      enabled: true
    endpoints:
      enabled: true
    ingresses:
      enabled: false
    networkPolicies:
      enabled: false
    persistentVolumeClaims:
      enabled: true
    persistentVolumes:
      enabled: false
    podDisruptionBudgets:
      enabled: false
    pods:
      enabled: true
      enforceTolerations: []
      rewriteHosts:
        enabled: true
        initContainer:
          image: library/alpine:3.20
          resources:
            limits:
              cpu: 30m
              memory: 64Mi
            requests:
              cpu: 30m
              memory: 64Mi
      translateImage: {}
      useSecretsForSATokens: false
    priorityClasses:
      enabled: false
    secrets:
      all: false
      enabled: true
    serviceAccounts:
      enabled: false
    services:
      enabled: true
    storageClasses:
      enabled: false
    volumeSnapshots:
      enabled: false
telemetry:
  enabled: true
